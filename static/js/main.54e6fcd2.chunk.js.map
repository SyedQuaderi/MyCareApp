{"version":3,"sources":["serviceWorker.ts","globalVariables.tsx","MyCareApp/MyActivity.tsx","MyCareApp/AddGoal.tsx","MyCareApp/MyGoals.tsx","MyCareApp/Menu.tsx","MyCareApp/Header.tsx","MyCareApp/Main.tsx","App_Main.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","$","MyActivity","props","MyCarePlanAPI","PES","APIConfig","PROD_API","id","useParams","useState","myCareSessionActivities","setMyCareSessionActivities","activityDetails","setActivityDetails","carePlanloading","activityLoading","isLoading","setIsLoading","schedule","setSchedule","usedVersion","activateActivity","activity","toggleActivity","useEffect","setActiveName","setActiveFocus","axios","get","then","response","data","catch","error","console","log","Container","fluid","Spinner","className","variant","animation","role","Col","sm","Row","map","session","date","key","fieldId","onClickEnter","onFocus","Card","onClick","style","display","description","Body","Title","Text","text","CardDeck","status","Footer","backgroundColor","statusCSS","AddGoal","Modal","show","onHide","handleClose","Header","closeButton","Form","Label","Control","type","placeholder","required","as","Button","MyGoals","urn1","URN1","URN2","myCareGoals","setMyCareGoals","useRef","React","createRef","completedGoals","setCompletedGoals","goalCount","getGoalCount","setShow","overrideVersion","completeGoal","goal","put","isCompleted","completedgoals","filter","a","length","incompleteGoals","inCompletedgoals","Math","abs","handleShow","addGoal","params","document","getElementById","value","Description","post","condition","isOpera","defaultElement","header","Menu","myCarePlan","setCarePlan","activeFocus","i","to","code","carePlanSectionId","path","children","activities","showActivityDetials","Breadcrumb","Item","href","initialState","patientDetails","client","bed","ward","patient","reducer","state","action","Main","myCarebg","PESLiteImages","carePlanAppbg","useReducer","dispatch","activityName","mainMenuItem","homePageLink","currentMode","API","Axios","MacID","res","MyCarePlan","backgroundImage","mainMenu","App","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54e6fcd2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","declare global {\r\n    interface Window {\r\n        mainMenuSlider:any,\r\n        subMenuSlider:any,\r\n        APIConfig:any,\r\n        PESLiteImages:any,\r\n        tvChannels: any,\r\n        remoteKeys: any,\r\n        modalOverlay: any,\r\n        modalDialog: any,\r\n        toaster: any,\r\n        modalText: any,\r\n        dietSpec: any,\r\n        messages: any\r\n    }\r\n}\r\n\r\nconst $ = window;\r\n\r\nexport default $;\r\n\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport { Row, Col, Card, CardDeck, Container} from 'react-bootstrap';\r\nimport { Focusable } from 'react-js-spatial-navigation';\r\nimport {FaUser}  from \"react-icons/fa\";\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PES from '../globalVariables';\r\nimport axios from 'axios';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nfunction MyActivity(props) {\r\n    //const urn2 = PES.APIConfig.URN2;\r\n    const MyCarePlanAPI = process.env.NODE_ENV === 'production' ? PES.APIConfig.PROD_API : PES.APIConfig.DEV_API;\r\n    let { id } = useParams();\r\n    const [activeFocus, setActiveFocus] = useState<number>(0);\r\n    const [activityName, setActiveName] = useState<string>('');\r\n    const [myCareSessionActivities, setMyCareSessionActivities] = useState<any>([]);\r\n    const [activityDetails, setActivityDetails] = useState<number>(0);\r\n    const [isLoading, setIsLoading] = useState<any>({carePlanloading: false, activityLoading: false});\r\n    const [schedule, setSchedule] = useState<Array<any>>([]);\r\n    const globalVersion = \"v1\";\r\n    let [overrideVersion, usedVersion] = [globalVersion, \"\"];\r\n  \r\n    useEffect(()=>{\r\n        let isCancelledflg:boolean = false; \r\n        props.setActiveName('MyActivity');\r\n        props.setActiveFocus(1);\r\n        setIsLoading({activityLoading: true});\r\n          // If override version is not defined, API will use the global version.\r\n          //overrideVersion = \"v2\";\r\n          usedVersion = overrideVersion;\r\n            //setPlan(item.code);\r\n            axios.get(`${MyCarePlanAPI}/${usedVersion}/careplan/activity/${id}`)\r\n            .then(response => {\r\n              setMyCareSessionActivities(response.data);\r\n              setIsLoading({activityLoading: false});\r\n              setSchedule(['Today', 'Tomorrow']);\r\n            })\r\n            .catch(error =>{\r\n              console.log(error);\r\n            });\r\n        return ()=> {\r\n            isCancelledflg = true;\r\n        }\r\n    }, []);\r\n    \r\n      function activateActivity(activity) {\r\n        toggleActivity(activity);\r\n      }\r\n    \r\n      function toggleActivity(activity) {\r\n        if (activity !== activityDetails) {\r\n          setActivityDetails(activity);\r\n        }\r\n        else {\r\n          setActivityDetails(0);\r\n        }\r\n      }\r\n    \r\n\r\n    return (\r\n        <Container fluid={true}>\r\n            {\r\n                isLoading.activityLoading ? (<Spinner className=\" text-blue\" variant=\"warning\" animation=\"border\" role=\"status\" >\r\n                </Spinner>):\r\n                (<>\r\n                    <Col sm={12} className=\"pt-0 pl-5 care-plan-main-content\">\r\n                        <h3 className=\"care-plan-font-settings text-left pb-1\"> {schedule[0]} </h3>\r\n                        <Row className=\"active\">\r\n                            {\r\n                                myCareSessionActivities.map(session =>\r\n                                    session.date !== null ? (\r\n                                        <Col sm={3}  key={session.fieldId} className=\"pb-2 card-main\">\r\n                                            <Focusable  className=\"active\" onClickEnter={()=>toggleActivity(session.fieldId)} onFocus={() => activateActivity(session)}>\r\n                                                <Card  onClick={()=>toggleActivity(session.fieldId)}>\r\n                                                <div className=\"card-toggle\" style={ activityDetails === session.fieldId ? {display: 'block'} : {display: 'none'}}>\r\n                                                        <p> {session.description}</p>\r\n                                                </div>\r\n                                                <Card.Body >\r\n                                                    <Card.Title className=\"pt-4 \">{session.description}</Card.Title>\r\n                                                    <Card.Text>\r\n                                                    {session.text !== ''? <FaUser/> : <span>&nbsp;</span>} {session.text}\r\n                                                    </Card.Text>\r\n                                                    <Card.Title className=\"care-plan-time\">14:15</Card.Title>\r\n                                                </Card.Body>\r\n                                                <CardDeck><p className=\"care-plan-status\">{session.status}</p></CardDeck>\r\n                                                <Card.Footer style={{backgroundColor: session.statusCSS}}>\r\n                                                </Card.Footer>\r\n                                                </Card>\r\n                                            </Focusable>\r\n                                        </Col>\r\n                                    ): null\r\n                                )\r\n                            }\r\n                        </Row>\r\n                        <h3 className=\"care-plan-font-settings text-left pb-1\"> {schedule[1]} </h3>\r\n                        <Row>\r\n                            {\r\n                                myCareSessionActivities.map(session =>\r\n                                    session.date === null ? (\r\n                                        <Col sm={3}  key={session.fieldId} className=\"pb-5 card-main\">\r\n                                            <Focusable  className=\"active\" onClickEnter={()=>toggleActivity(session.fieldId)} onFocus={() => activateActivity(session)}>\r\n                                                <Card  onClick={()=>toggleActivity(session.fieldId)}>\r\n                                                <div className=\"card-toggle\" style={ activityDetails === session.fieldId ? {display: 'block'} : {display: 'none'}}>\r\n                                                        <p> {session.description}</p>\r\n                                                </div>\r\n                                                <Card.Body >\r\n                                                    <Card.Title className=\"pt-4 \">{session.description}</Card.Title>\r\n                                                    <Card.Text>\r\n                                                    {session.text !== ''? <FaUser/> : <span>&nbsp;</span>} {session.text}\r\n                                                    </Card.Text>\r\n                                                    <Card.Title className=\"care-plan-time\">10:30 PM</Card.Title>\r\n                                                </Card.Body>\r\n                                                <CardDeck><p className=\"care-plan-status\">{session.status}</p></CardDeck>\r\n                                                <Card.Footer style={{backgroundColor: session.statusCSS}}>\r\n                                                </Card.Footer>\r\n                                                </Card>\r\n                                            </Focusable>\r\n                                        </Col>\r\n                                    ): null\r\n                                )\r\n                            }\r\n                        </Row>\r\n                    </Col>\r\n                </>)\r\n            }     \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MyActivity;\r\n","import React from 'react';\r\nimport {Modal, Button, Form, Row, Col} from 'react-bootstrap';\r\n\r\nfunction AddGoal(props) {\r\n  \r\n  return (\r\n    <>\r\n      <Modal show={props.show} onHide={props.handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add Goal</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"ml-5\">\r\n            <p className=\"goal-intro\">It is important to work with your Care Team when you set these goals</p>\r\n            <Row>\r\n                <Col sm={12}>\r\n                    <Form>\r\n                        <Row>\r\n                          <Col sm={2} className=\"mt-2\">\r\n                              <Form.Label >Title</Form.Label>\r\n                          </Col>\r\n                          <Col sm={8}>\r\n                              <Form.Control id=\"goalTitle\" type=\"text\" placeholder=\"Insert a title for your Goal here\" required />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\"></Row>       \r\n                        <Row>\r\n                            <Col sm={2}>\r\n                                <Form.Label>Description</Form.Label>\r\n                            </Col>\r\n                            <Col sm={8}>\r\n                                <Form.Control  id=\"goalDescription\" as=\"textarea\" required/>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-4\"></Row>\r\n            <Row className=\"mr-4\">\r\n              <Col className=\"col-sm-6\">\r\n              </Col>\r\n              <Row > \r\n                <Col sm={6}>\r\n                  <Button className=\"cancel-goal\" variant=\"secondary\" onClick={props.handleClose}>\r\n                    Close\r\n                  </Button>\r\n                </Col>\r\n                <Col sm={6}>\r\n                  <Button className=\"save-goal\" variant=\"primary\" onClick={props.handleClose}>\r\n                    Save Goal\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <Col sm={2}>\r\n              </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddGoal;\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport { Row, Col, Button, Container} from 'react-bootstrap';\r\nimport { Focusable, FocusableSection } from 'react-js-spatial-navigation';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport {FaRegStar, FaStar} from 'react-icons/fa';\r\nimport { isOpera, CustomView } from 'react-device-detect';\r\nimport PES from '../globalVariables';\r\nimport './CarePlanMain.scss'\r\nimport AddGoal from './AddGoal';\r\nimport axios from 'axios';\r\n\r\nfunction MyGoals(props) {\r\n    const urn1 = PES.APIConfig.URN1;\r\n    const urn2 = PES.APIConfig.URN2;\r\n    const MyCarePlanAPI = process.env.NODE_ENV === 'production' ? PES.APIConfig.PROD_API : PES.APIConfig.DEV_API;\r\n  \r\n    const [activityName, setActiveName] = useState<string>('');\r\n    const [myCareGoals, setMyCareGoals] = useState<any>([]);\r\n    const [currentPlan, setPlan] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState<any>(false);\r\n    const mainMenuItem = useRef<any>([React.createRef(), React.createRef()]);\r\n    const [schedule, setSchedule] = useState<Array<any>>([]);\r\n    const [completedGoals, setCompletedGoals] = useState<any>(false);\r\n    const [goalCount, getGoalCount] = useState<number>(0);\r\n    const [show, setShow] = useState<boolean>(false);\r\n    const globalVersion = \"v1\";\r\n    let [overrideVersion, usedVersion] = [globalVersion, \"\"];\r\n\r\n    useEffect(() => {\r\n        let cleanup:boolean = false;\r\n        props.setActiveName('MyGoals');\r\n        props.setActiveFocus(3);\r\n        setIsLoading(true);\r\n        usedVersion = overrideVersion;\r\n        axios.get(`${MyCarePlanAPI}/${usedVersion}/careplan/goal/${props.id}`)\r\n        .then(response => {\r\n          setMyCareGoals(response.data);\r\n          setIsLoading(false);\r\n          console.log(\"goals\", `${MyCarePlanAPI}/${usedVersion}/careplan/goal/${props.id}`);\r\n          const completedgoals = response.data.filter(function (a) {\r\n            return a.isCompleted;\r\n          });\r\n          if(completedgoals.length !== 0) {\r\n            setCompletedGoals(true);\r\n          }\r\n          getGoalCount(completedgoals.length);\r\n        })\r\n        .catch(error =>{\r\n          console.log(error);\r\n        });\r\n        return ()=>{\r\n            cleanup = true;\r\n        }\r\n    }, []);\r\n    function completeGoal (goal) {\r\n        const params = { isCompleted: true };\r\n        // If override version is not defined, API will use the global version.\r\n        //overrideVersion = \"v2\";\r\n        usedVersion = overrideVersion;\r\n     \r\n         axios.put(`${MyCarePlanAPI}/${usedVersion}/careplan/goal/update/${goal.fieldId}`, params)\r\n             .then(response => {\r\n               // If override version is not defined, API will use the global version.\r\n               //overrideVersion = \"v2\";\r\n               usedVersion = overrideVersion;\r\n     \r\n                axios.get(`${MyCarePlanAPI}/${usedVersion}/careplan/goal/${urn1}`)\r\n               .then(response => {\r\n                setMyCareGoals(response.data);\r\n                 setIsLoading(false);\r\n                 const completedgoals = response.data.filter(function (a) {\r\n                   return a.isCompleted ;\r\n                 });\r\n                 if(completedgoals.length !== 0) {\r\n                   setCompletedGoals(true);\r\n                 }\r\n                 getGoalCount(completedgoals.length);\r\n               })\r\n               .catch(error =>{\r\n                 console.log(error);\r\n               });\r\n             })\r\n         .catch(error => {\r\n           console.log(error);\r\n         })\r\n       }\r\n     \r\n       function incompleteGoals(goal) {\r\n         const params = { isCompleted: false };\r\n     \r\n         // If override version is not defined, API will use the global version.\r\n         //overrideVersion = \"v2\";\r\n         usedVersion = overrideVersion;\r\n     \r\n           axios.put(`${MyCarePlanAPI}/${usedVersion}/careplan/goal/update/${goal.fieldId}`, params)\r\n               .then(response => {\r\n                   // If override version is not defined, API will use the global version.\r\n                   //overrideVersion = \"v2\";\r\n                   usedVersion = overrideVersion;\r\n                   axios.get(`${MyCarePlanAPI}/${usedVersion}/careplan/goal/${urn1}`)\r\n                   .then(response => {\r\n                    setMyCareGoals(response.data);\r\n                     setIsLoading(false);\r\n                     const [inCompletedgoals, completedgoals]  = [response.data.filter(function (a) {\r\n                       return !a.isCompleted ;\r\n                     }), response.data.filter(function (a) {\r\n                       return a.isCompleted ;\r\n                     })];\r\n     \r\n                     getGoalCount(Math.abs(inCompletedgoals.length - response.data.length));\r\n     \r\n                     if(completedgoals.length === 0) {\r\n                       setCompletedGoals(false);\r\n                     }\r\n             \r\n                   })\r\n                   .catch(error =>{\r\n                     console.log(error);\r\n                   });\r\n                 })\r\n                 .catch(error => {\r\n                   console.log(error);\r\n                 })\r\n       }\r\n\r\n       const handleClose = () => {\r\n         setShow(false); \r\n         addGoal();\r\n       };\r\n       const handleShow = () => setShow(true); \r\n     \r\n       const addGoal = () => {\r\n         const title = (document.getElementById(\"goalTitle\") as HTMLInputElement).value;\r\n         const description = (document.getElementById(\"goalDescription\") as HTMLInputElement).value;\r\n     \r\n         const params = {\r\n             Title: title,\r\n             Description: description,\r\n         }\r\n     \r\n         // If override version is not defined, API will use the global version.\r\n         //overrideVersion = \"v2\";\r\n         usedVersion = overrideVersion;\r\n     \r\n           axios.post(`${MyCarePlanAPI}/${usedVersion}/careplan/goal/create/${props.id}`, params)\r\n               .then(response => {\r\n                   // If override version is not defined, API will use the global version.\r\n                   //overrideVersion = \"v2\";\r\n                   usedVersion = overrideVersion;\r\n     \r\n                  axios.get(`${MyCarePlanAPI}/${usedVersion}/careplan/goal/${props.id}`)\r\n                     .then(response => {\r\n                        setMyCareGoals(response.data);\r\n                       setIsLoading(false);\r\n                       const completedgoals = response.data.filter(function (a) {\r\n                         return a.isCompleted ;\r\n                       });\r\n                       if(completedgoals.length !== 0) {\r\n                         setCompletedGoals(true);\r\n                       }\r\n                       getGoalCount(completedgoals.length);\r\n                     })\r\n                     .catch(error =>{\r\n                       console.log(error);\r\n                     });\r\n              })\r\n              .catch(error => {console.log(error)});\r\n       }\r\n    return (\r\n        <Container fluid={true}>\r\n            {\r\n                isLoading ? \r\n                (<Spinner className=\"text-blue\" variant=\"info\" animation=\"border\" role=\"status\" >\r\n                </Spinner>): \r\n                (<>\r\n                    <Row>\r\n                        <Col sm={12}>\r\n                            <Row>\r\n                                {\r\n                                    myCareGoals.length ? (\r\n                                        <>\r\n                                            <Col sm={8} className=\"text-left pl-5\">\r\n                                                <h4 className=\"goals-count\">You have completed {goalCount} of {myCareGoals.length} goals</h4>\r\n                                                <h4 className=\"goals-motive\">Keep going you can do it</h4>\r\n                                            </Col>\r\n                                            <CustomView condition={!isOpera}>\r\n                                                <Col sm={2} className=\"text-right\"><Button onClick={handleShow} className=\"activity-button-active add-new-goals\">Add new Goal</Button></Col>\r\n                                            </CustomView>\r\n                                        </>\r\n                                    ) : null\r\n                                }\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col sm={12} className=\"pt-3 pl-5 goal-main-content\">\r\n                            <FocusableSection  defaultElement={'active'}>\r\n                                <Row className=\"incomplete-goals\">\r\n                                    {\r\n                                        myCareGoals.filter(goal => !goal.isCompleted).map(goal =>\r\n                                            <Col sm={10}  key={goal.fieldId} className=\"pb-3 goal-card-main mt-2\" onClick={()=> completeGoal(goal)}>\r\n                                                <Focusable  className=\"active\" onClickEnter={()=> completeGoal(goal)} >\r\n                                                    <Row className=\"goals-main\">\r\n                                                        <Col sm={12} className=\"pl-0 pr-0\">\r\n                                                            <h3 className=\"goals-title\">\r\n                                                                {goal.header}\r\n                                                            </h3>\r\n                                                            <FaRegStar />\r\n                                                            <p className=\"goals-description\">\r\n                                                                {goal.text}\r\n                                                            </p>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Focusable>\r\n                                            </Col> \r\n                                        )\r\n                                    }\r\n                                </Row>\r\n                                <Row>\r\n                                    {\r\n                                    completedGoals ? \r\n                                        (<h4 className=\"completed-goals text-left pl-3 mb-3 mt-3\">Completed Goals</h4>) : null\r\n                                    }\r\n                                </Row>\r\n                                <Row className=\"completed-goal\">\r\n                                {\r\n                                    myCareGoals.filter(goal => goal.isCompleted).map(goal =>\r\n                                        <Col sm={10}  key={goal.fieldId} className=\"pb-3 goal-card-main\" onClick={()=> incompleteGoals(goal)}>\r\n                                            <Focusable  className=\"active\" onClickEnter={()=> incompleteGoals(goal)} >\r\n                                                <Row className=\"goals-main\">\r\n                                                    <Col sm={12} className=\"pl-0 pr-0\">\r\n                                                        <h3 className=\"goals-title\">\r\n                                                            {goal.header}\r\n                                                        </h3>\r\n                                                        <FaStar />\r\n                                                        <p className=\"goals-description\">\r\n                                                            {goal.text}\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </Focusable>\r\n                                        </Col> \r\n                                    )\r\n                                }\r\n                                </Row>\r\n                            </FocusableSection>\r\n                        </Col>   \r\n                    </Row>\r\n                 </>   \r\n                \r\n                )\r\n            }\r\n            <AddGoal \r\n                handleClose={handleClose}\r\n                handleShow={handleShow}\r\n                show={show}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MyGoals;","import React, {useState, useEffect, useRef} from 'react';\r\nimport  { Focusable, FocusableSection } from 'react-js-spatial-navigation';\r\nimport {  Button } from 'react-bootstrap';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link, useLocation, useParams\r\n  } from \"react-router-dom\";\r\nimport MyActivity from '../MyCareApp/MyActivity';\r\nimport MyGoals from '../MyCareApp/MyGoals';\r\nimport PES from '../globalVariables';\r\nimport './CarePlanMain.scss'\r\nimport AddGoal from './AddGoal';\r\nimport axios from 'axios';\r\n\r\nfunction Menu(props) {\r\n    //const urn1 = PES.APIConfig.URN1;\r\n    //const urn2 = PES.APIConfig.URN2;\r\n    const MyCarePlanAPI:any = process.env.NODE_ENV === 'production' ? PES.APIConfig.PROD_API : PES.APIConfig.DEV_API;\r\n  \r\n    const [myCarePlan, setCarePlan] = useState<Array<any>>([]);\r\n    const [activeFocus, setActiveFocus] = useState<number>(0);\r\n    const [myCareSessionActivities, setMyCareSessionActivities] = useState<any>([]);\r\n    const [activityDetails, setActivityDetails] = useState<number>(0);\r\n    const [isLoading, setIsLoading] = useState<any>({carePlanloading: false, activityLoading: false});\r\n    const [schedule, setSchedule] = useState<Array<any>>([]);\r\n    const globalVersion = \"v1\";\r\n    let [overrideVersion, usedVersion] = [globalVersion, \"\"];\r\n    let { id } = useParams();\r\n    useEffect(()=> {\r\n        let flag:boolean = false;\r\n      setIsLoading({ carePlanloading: true });\r\n      // If override version is not defined, API will use the global version.\r\n      //overrideVersion = \"v2\";\r\n      usedVersion = overrideVersion;\r\n        console.log(\"id\", id);\r\n      axios.get(`${MyCarePlanAPI}/${usedVersion}/careplan/section/${id}`)\r\n      .then(response => {\r\n        setCarePlan(response.data); \r\n        setIsLoading({carePlanloading: false});\r\n      })\r\n      .catch(error =>{\r\n        console.log(error);\r\n      });\r\n      return ()=>{\r\n        flag = true;\r\n      }\r\n    }, []);\r\n  \r\n  \r\n    function toggleActivity(activity) {\r\n      if (activity !== activityDetails) {\r\n        setActivityDetails(activity);\r\n      }\r\n      else {\r\n        setActivityDetails(0);\r\n      }\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n            <Router>\r\n                <div className=\"d-flex\">\r\n                    <div className=\"sidebar\">\r\n                        <FocusableSection  defaultElement={'active'}>\r\n                        {\r\n                            myCarePlan.map((activity, i) =>\r\n                            <Link to={`/${id}/${activity.code}`} key={i}>\r\n                                <Button className={\"activity-button \" + (activeFocus === activity.carePlanSectionId ? \"activity-button-active \" : \"activity-button-inactive\")}  \r\n                                        >\r\n                                    {activity.header}\r\n                                    <div className={\"selection-arrow \" + (activeFocus === activity.carePlanSectionId ? \"selection-arrow-active \"  : \"selection-arrow-inactive\")}>\r\n                                    </div>\r\n                                </Button>\r\n                            </Link>\r\n                            )\r\n                        }\r\n                    </FocusableSection>\r\n                    </div>\r\n                    <div className=\"d-flex w-100 justify-content-center p-2\">\r\n                    <Switch>\r\n                        <Route path=\"/:id/SCHED\" children={<MyActivity \r\n                                activities={myCareSessionActivities} \r\n                                showActivityDetials={activityDetails} \r\n                                toggleActivity={toggleActivity} \r\n                                isLoading={isLoading.activityLoading}\r\n                                schedule={schedule} setActiveFocus={setActiveFocus}\r\n                                setActiveName={props.setActiveName} id={id}\r\n                            />} />\r\n                        <Route path=\"/:id/GOALS\" children={<MyGoals setActiveFocus={setActiveFocus} setActiveName={props.setActiveName} id={id}/>} />\r\n                    </Switch>\r\n                    </div>\r\n                </div>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react';\r\nimport { Row, Col} from 'react-bootstrap';\r\nimport Breadcrumb from 'react-bootstrap/Breadcrumb';\r\nimport {FaHome, FaChevronRight}  from \"react-icons/fa\";\r\nimport { Focusable } from 'react-js-spatial-navigation';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <Row>\r\n            <Col sm={8} className=\"mycare-plan-header\">\r\n            <Breadcrumb>\r\n                    <Breadcrumb.Item href=\"#\" className=\"care-plan-home-icon\"><FaHome/></Breadcrumb.Item>\r\n                <Breadcrumb.Item href=\"#\" className=\"pt-4\">\r\n                <FaChevronRight className=\"care-plan-fa-icon mr-1\"/>\r\n                    My Care\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item className=\"pt-4\">\r\n                <FaChevronRight className=\"care-plan-fa-icon mr-1\"/>\r\n                    {props.activity}\r\n                </Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            </Col>\r\n            <Col sm={4} className=\"pt-3\">\r\n                <h1 className=\"care-plan-font-settings text-right pr-5\"></h1>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {useState, useRef, useEffect, CSSProperties, useReducer} from 'react';\r\nimport '../App.css';\r\nimport { Container, Row, Col, Spinner} from 'react-bootstrap';\r\nimport SpatialNavigation, {FocusableSection } from 'react-js-spatial-navigation';\r\nimport Menu from './Menu';\r\nimport Header from './Header';\r\nimport PES from '../globalVariables';\r\nimport './CarePlanMain.scss'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link, useLocation, useParams\r\n} from \"react-router-dom\";\r\nimport Axios from 'axios';\r\n\r\nconst initialState = {\r\n  patientDetails: {client: {}, bed: {ward: {}}, patient: {}} \r\n}\r\n\r\nconst reducer=(state, action)=>{\r\n    switch(action.type) {\r\n      case 'FETCH_SUCCESS':\r\n        return {...state, patientDetails: action.patient}\r\n      case 'FETCH_FAILURE':\r\n        return {patientDetails: {}}\r\n      default:\r\n        return state;\r\n    }\r\n}\r\n\r\nconst Main: React.FC = () => {\r\n  const myCarebg = PES.PESLiteImages.carePlanAppbg;\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const [myCarePlan, setCarePlan] = useState<Array<any>>([]);\r\n  const [activeFocus, setActiveFocus] = useState<number>(0);\r\n  const [activityName, setActiveName] = useState<string>('');\r\n  const [isLoading, setIsLoading] = useState<any>({carePlanloading: false, activityLoading: false});\r\n  const mainMenuItem = useRef<any>([React.createRef(), React.createRef()]);\r\n  const [homePageLink, setHomePageLink] = useState<boolean>(false);\r\n  const currentMode = PES.APIConfig;\r\n  const API = process.env.NODE_ENV === 'production' ? currentMode.PROD_API : currentMode.DEV_API;\r\n  const globalVersion = \"v1\";\r\n\r\n  useEffect(()=>{\r\n    Axios.get(`${API}/${globalVersion}/client/${currentMode.MacID}`)\r\n    .then(res=>dispatch({type:'FETCH_SUCCESS', patient: res.data }))\r\n    .catch(error=>{\r\n      dispatch({type: 'FETCH_FAILURE', patient: {}})\r\n    })\r\n  },[]);\r\n\r\n const MyCarePlan:CSSProperties = {\r\n    backgroundImage: `url(/${myCarebg})`,\r\n  }\r\n  return (\r\n    <>\r\n    <div style={MyCarePlan} className={\" care-plan-main-body\"}>\r\n\r\n      { isLoading.carePlanloading ? \r\n        (<Spinner className=\"text-blue\" variant=\"warning\" animation=\"border\" role=\"status\" >\r\n        </Spinner>) :\r\n        (\r\n          <Container fluid={true}>\r\n          <SpatialNavigation>\r\n          <Row>\r\n          <Col sm={12}>\r\n              <FocusableSection  defaultElement={'active'}>\r\n                <Header activity={activityName}  homePageLink={homePageLink} patient={state.patientDetails.patient}/>\r\n              </FocusableSection>\r\n            </Col>\r\n          </Row>\r\n          <Row >\r\n          <Col sm={12} className=\"pl-0\">\r\n          <Switch>\r\n            <Route path=\"/:id\" children={<Menu  \r\n                mainMenu={myCarePlan} \r\n                activeFocus={activeFocus}\r\n                mainMenuItem={mainMenuItem}\r\n                setActiveName={setActiveName}\r\n              />} />\r\n          </Switch>\r\n              \r\n            </Col>\r\n          </Row>\r\n          \r\n          </SpatialNavigation>  \r\n        \r\n      </Container>\r\n        )\r\n      }\r\n      \r\n    </div>\r\n    \r\n      </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport HomePage from './HomePage/Main';\r\nimport MealOrdering from './MealOrdering/Main';\r\nimport MyCareApp from './MyCareApp/Main';\r\n\r\nconst App: React.FC = () => {\r\n  \r\n  return (\r\n    <div>\r\n      <MyCareApp/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {\r\n    BrowserRouter as Router\r\n  } from \"react-router-dom\";\r\nimport App from './App_Main'\r\n\r\nReactDOM.render( \r\n    <div>\r\n        <Router >\r\n            <App />\r\n        </Router>\r\n    </div>, \r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}